{"id": "safe_arithmetic", "description": "Basic arithmetic operations", "code": "def add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(5, 3)", "expected_security_level": "approved", "expected_violations": 0, "category": "basic_operations"}
{"id": "string_manipulation", "description": "Safe string operations", "code": "def process_string(text):\n    return text.upper().replace(' ', '_')\n\nresult = process_string('hello world')", "expected_security_level": "approved", "expected_violations": 0, "category": "basic_operations"}
{"id": "list_processing", "description": "List comprehension and processing", "code": "def process_list(items):\n    return [x * 2 for x in items if x > 0]\n\nresult = process_list([1, -2, 3, -4, 5])", "expected_security_level": "approved", "expected_violations": 0, "category": "basic_operations"}
{"id": "dangerous_exec", "description": "Code execution with exec", "code": "def dangerous_code():\n    exec('print(\"malicious code\")')\n    return True\n\nresult = dangerous_code()", "expected_security_level": "rejected", "expected_violations": 1, "category": "dangerous_operations"}
{"id": "dangerous_eval", "description": "Code execution with eval", "code": "def evaluate_input(user_input):\n    return eval(user_input)\n\nresult = evaluate_input('2 + 2')", "expected_security_level": "rejected", "expected_violations": 1, "category": "dangerous_operations"}
{"id": "file_access", "description": "File system access", "code": "def read_file(filename):\n    with open(filename, 'r') as f:\n        return f.read()\n\nresult = read_file('secret.txt')", "expected_security_level": "rejected", "expected_violations": 1, "category": "dangerous_operations"}
{"id": "import_os", "description": "Operating system module import", "code": "import os\n\ndef list_directory():\n    return os.listdir('.')\n\nresult = list_directory()", "expected_security_level": "rejected", "expected_violations": 1, "category": "dangerous_operations"}
{"id": "subprocess_call", "description": "Subprocess execution", "code": "import subprocess\n\ndef run_command(cmd):\n    return subprocess.run(cmd, shell=True)\n\nresult = run_command('ls -la')", "expected_security_level": "rejected", "expected_violations": 2, "category": "dangerous_operations"}
{"id": "complex_computation", "description": "High complexity computation", "code": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nresult = [fibonacci(i) for i in range(20)]", "expected_security_level": "monitored", "expected_violations": 0, "category": "complexity_test"}
{"id": "deep_nesting", "description": "Deeply nested control structures", "code": "def deep_nested_function(x):\n    if x > 0:\n        if x > 1:\n            if x > 2:\n                if x > 3:\n                    if x > 4:\n                        if x > 5:\n                            return x * 2\n    return 0\n\nresult = deep_nested_function(10)", "expected_security_level": "monitored", "expected_violations": 0, "category": "complexity_test"}
{"id": "large_iteration", "description": "Large number of iterations", "code": "def sum_large_range():\n    total = 0\n    for i in range(100000):\n        total += i\n    return total\n\nresult = sum_large_range()", "expected_security_level": "restricted", "expected_violations": 0, "category": "resource_intensive"}
{"id": "memory_intensive", "description": "Memory intensive operations", "code": "def create_large_list():\n    return [i for i in range(1000000)]\n\ndef process_large_data():\n    data = create_large_list()\n    return sum(data)\n\nresult = process_large_data()", "expected_security_level": "restricted", "expected_violations": 0, "category": "resource_intensive"}
{"id": "network_request", "description": "Network request attempt", "code": "import urllib.request\n\ndef fetch_url(url):\n    response = urllib.request.urlopen(url)\n    return response.read()\n\nresult = fetch_url('http://example.com')", "expected_security_level": "rejected", "expected_violations": 1, "category": "dangerous_operations"}
{"id": "input_function", "description": "User input function", "code": "def get_user_input():\n    name = input('Enter your name: ')\n    return f'Hello, {name}!'\n\nresult = get_user_input()", "expected_security_level": "rejected", "expected_violations": 1, "category": "dangerous_operations"}
{"id": "global_modification", "description": "Global variable modification", "code": "global_var = 0\n\ndef modify_global():\n    global global_var\n    global_var += 1\n    return global_var\n\nresult = modify_global()", "expected_security_level": "monitored", "expected_violations": 0, "category": "global_access"}
{"id": "safe_math_operations", "description": "Safe mathematical operations", "code": "import math\n\ndef calculate_area(radius):\n    return math.pi * radius ** 2\n\ndef calculate_distance(x1, y1, x2, y2):\n    return math.sqrt((x2-x1)**2 + (y2-y1)**2)\n\narea = calculate_area(5)\ndist = calculate_distance(0, 0, 3, 4)", "expected_security_level": "approved", "expected_violations": 0, "category": "basic_operations"}
{"id": "reflection_operations", "description": "Reflection and introspection", "code": "def use_reflection(obj, attr_name):\n    if hasattr(obj, attr_name):\n        return getattr(obj, attr_name)\n    return None\n\nclass TestClass:\n    def __init__(self):\n        self.value = 42\n\nobj = TestClass()\nresult = use_reflection(obj, 'value')", "expected_security_level": "monitored", "expected_violations": 0, "category": "reflection"}
{"id": "dynamic_import", "description": "Dynamic module import", "code": "def dynamic_import(module_name):\n    return __import__(module_name)\n\nmodule = dynamic_import('sys')\nresult = module.version", "expected_security_level": "rejected", "expected_violations": 1, "category": "dangerous_operations"}
{"id": "lambda_functions", "description": "Lambda function usage", "code": "def process_with_lambda(data):\n    squared = list(map(lambda x: x**2, data))\n    filtered = list(filter(lambda x: x > 10, squared))\n    return filtered\n\nresult = process_with_lambda([1, 2, 3, 4, 5, 6])", "expected_security_level": "approved", "expected_violations": 0, "category": "basic_operations"}
{"id": "nested_functions", "description": "Nested function definitions", "code": "def outer_function(x):\n    def inner_function(y):\n        return x + y\n    \n    def another_inner(z):\n        return inner_function(z) * 2\n    \n    return another_inner\n\nfunc = outer_function(10)\nresult = func(5)", "expected_security_level": "approved", "expected_violations": 0, "category": "basic_operations"}
