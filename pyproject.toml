[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pcc-niuc"
version = "0.1.0"
description = "Privacy-Preserving Computing with Non-Interactive Universal Computation"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "PCC-NIUC Team", email = "team@pcc-niuc.example"},
]
keywords = [
    "privacy-preserving-computing",
    "secure-computation", 
    "code-verification",
    "certificates",
    "security"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Security",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering",
]
requires-python = ">=3.8"
dependencies = [
    "dataclasses-json>=0.5.7",
    "cryptography>=3.4.8",
    "psutil>=5.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.2.0",
    "pytest-cov>=2.12.0",
    "black>=21.6b0",
    "isort>=5.9.0",
    "flake8>=3.9.0",
    "mypy>=0.910",
    "pre-commit>=2.13.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=0.5.0",
    "myst-parser>=0.15.0",
]
benchmark = [
    "matplotlib>=3.4.0",
    "pandas>=1.3.0",
    "seaborn>=0.11.0",
]

[project.urls]
Homepage = "https://github.com/pcc-niuc/pcc-niuc"
Repository = "https://github.com/pcc-niuc/pcc-niuc.git"
Documentation = "https://pcc-niuc.readthedocs.io/"
"Bug Reports" = "https://github.com/pcc-niuc/pcc-niuc/issues"

[project.scripts]
pcc-demo = "demo.demo_cli:main"
pcc-benchmark = "bench.score:main"
pcc-check = "pcc.checker:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["pcc*", "bench*", "demo*", "tests*"]

[tool.setuptools.package-data]
"bench" = ["*.jsonl"]
"docs" = ["*.md"]
".cursor" = ["rules/*"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["pcc", "bench", "demo", "tests"]
known_third_party = ["pytest", "cryptography", "psutil"]

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = """
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=pcc
    --cov=bench
    --cov=demo
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
"""
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "security: marks tests as security-related",
]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "tests.*"
]
disallow_untyped_defs = false

# Coverage configuration
[tool.coverage.run]
source = ["pcc", "bench", "demo"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "conftest.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 configuration (in setup.cfg format, but documented here)
# [flake8]
# max-line-length = 88
# extend-ignore = E203, W503
# exclude = .git,__pycache__,build,dist,.eggs,*.egg-info,.venv,venv

# Security and audit tools
[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]  # Skip assert_used and shell=True tests

# Pre-commit hooks configuration would go in .pre-commit-config.yaml
